name: CI Pipeline

# Trigger the workflow on push and pull request to the main branch
on:
    push:
        branches:
        - main
    pull_request:
        branches:
        - main

jobs:
    build:
        runs-on: ubuntu-latest  # Use the latest Ubuntu environment
        
        # Set environment variables
        env:
          DATABASE_URL: "sqlite:///:memory:"
          TESTING: "true"
          SQLALCHEMY_DATABASE_URI: "sqlite:///:memory:"

        steps:
        # Step 1: Check out the repository code
        - name: Checkout Code
          uses: actions/checkout@v4
          with:
            # Full git history is needed to get a proper
            # list of changed files within `super-linter`
            fetch-depth: 0

        # SUPER LINTER
        - name: Run Super-Linter
          uses: github/super-linter@v5
          env:
            VALIDATE_ALL_CODEBASE: true
            GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}  # Add this line to provide the token
            VALIDATE_PYTHON_PYLINT: true
            VALIDATE_JAVASCRIPT_ES: true
            DEFAULT_BRANCH: main  # Set the default branch for the linter
            FILTER_REGEX_EXCLUDE: "^Allinone/src/node_modules/" # Not include node_modules stuff

        # Step 2: Cache Node.js modules (optional, speeds up future builds)
        - name: Cache Node.js modules
          uses: actions/cache@v2
          with:
            path: ./Allinone/src/node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('Allinone/src/package-lock.json') }}
            restore-keys: |
              ${{ runner.os }}-node-

        # Step 3: Set up Node.js environment for JavaScript/React.js
        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '16.x'
    
        # Step 4: Install dependencies for the frontend (React.js)
        - name: Install Node.js dependencies
          run: npm install
          working-directory: ./Allinone/src
    
        # Step 5: Cache Python dependencies (optional)
        - name: Cache Python dependencies
          uses: actions/cache@v2
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('Allinone/microservice/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-

        # Step 6: Set up Python environment
        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: '3.12.6'
    
        # Step 7: Install Python dependencies for the backend (Flask)
        - name: Install Python dependencies
          run: |
            python -m pip install --upgrade pip
            python -m pip install pytest pytest-cov pytest-mock flask-sqlalchemy flask-cors mysqlclient mysql-connector-python
            pip install -r requirements.txt
          working-directory: ./Allinone/microservice

        # Step 8: Create SQLite database directory
        - name: Create SQLite directory
          run: |
            mkdir -p ${{ github.workspace }}/Allinone/microservice/instance
            touch ${{ github.workspace }}/Allinone/microservice/instance/test.db
          
        # Step 9: Run Python unit tests with SQLite
        - name: Run Python unit tests
          env:
            DATABASE_URL: "sqlite:///:memory:"
            TESTING: "true"
            SQLALCHEMY_DATABASE_URI: "sqlite:///:memory:"
          run: |
            python -m pytest tests/ -v --cov=. --cov-report=term-missing
          working-directory: ./Allinone/microservice

        # Step 10: Run JS/React unit tests
        - name: Run JS/React unit tests
          run: npm test
          working-directory: ./Allinone/src/tests

        # Step 11: Upload test coverage reports (optional)
        # - name: Upload coverage reports
        #   uses: codecov/codecov-action@v3
        #   with:
        #     token: ${{ secrets.CODECOV_TOKEN }}
        #     files: ./Allinone/microservice/coverage.xml
        #     flags: unittests
        #     name: codecov-umbrella
        #     fail_ci_if_error: true